# -*- coding: utf-8 -*-

"""
    collection

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import collection.models.party

class RequestToPay(object):

    """Implementation of the 'RequestToPay' model.

    TODO: type model description here.

    Attributes:
        amount (string): Amount that will be debited from the payer account.
        currency (string): ISO4217 Currency
        external_id (string): External id is used as a reference to the
            transaction. External id is used for reconciliation. The external
            id will be included in transaction history report. <br>External id
            is not required to be unique.
        payer (Party): Party identifies a account holder in the wallet
            platform. Party consists of two parameters, type and partyId. Each
            type have its own validation of the partyId<br> MSISDN - Mobile
            Number validated according to ITU-T E.164. Validated with
            IsMSISDN<br> EMAIL - Validated to be a valid e-mail format.
            Validated with IsEmail<br> PARTY_CODE - UUID of the party.
            Validated with IsUuid
        payer_message (string): Message that will be written in the payer
            transaction history message field.
        payee_note (string): Message that will be written in the payee
            transaction history note field.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount":'amount',
        "currency":'currency',
        "external_id":'externalId',
        "payer":'payer',
        "payer_message":'payerMessage',
        "payee_note":'payeeNote'
    }

    def __init__(self,
                 amount=None,
                 currency=None,
                 external_id=None,
                 payer=None,
                 payer_message=None,
                 payee_note=None):
        """Constructor for the RequestToPay class"""

        # Initialize members of the class
        self.amount = amount
        self.currency = currency
        self.external_id = external_id
        self.payer = payer
        self.payer_message = payer_message
        self.payee_note = payee_note


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        amount = dictionary.get('amount')
        currency = dictionary.get('currency')
        external_id = dictionary.get('externalId')
        payer = collection.models.party.Party.from_dictionary(dictionary.get('payer')) if dictionary.get('payer') else None
        payer_message = dictionary.get('payerMessage')
        payee_note = dictionary.get('payeeNote')

        # Return an object of this model
        return cls(amount,
                   currency,
                   external_id,
                   payer,
                   payer_message,
                   payee_note)


