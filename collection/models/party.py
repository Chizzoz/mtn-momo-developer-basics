# -*- coding: utf-8 -*-

"""
    collection

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Party(object):

    """Implementation of the 'Party' model.

    Party identifies a account holder in the wallet platform. Party consists
    of two parameters, type and partyId. Each type have its own validation of
    the partyId<br> MSISDN - Mobile Number validated according to ITU-T E.164.
    Validated with IsMSISDN<br> EMAIL - Validated to be a valid e-mail format.
    Validated with IsEmail<br> PARTY_CODE - UUID of the party. Validated with
    IsUuid

    Attributes:
        party_id_type (PartyIdTypeEnum): TODO: type description here.
        party_id (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "party_id_type":'partyIdType',
        "party_id":'partyId'
    }

    def __init__(self,
                 party_id_type=None,
                 party_id=None):
        """Constructor for the Party class"""

        # Initialize members of the class
        self.party_id_type = party_id_type
        self.party_id = party_id


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        party_id_type = dictionary.get('partyIdType')
        party_id = dictionary.get('partyId')

        # Return an object of this model
        return cls(party_id_type,
                   party_id)


